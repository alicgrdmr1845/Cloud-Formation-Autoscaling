AWSTemplateFormatVersion: 2010-09-09
Description: |
  This template creates ASG with LT and policy
Parameters:
  Vpc:
    Description: Select your Vpc 
    Type: AWS::EC2::VPC::Id

  InstanceType:  
    Description: Select your instance type 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.nano
      - t3.micro
      - m1.small

  MyKeyPair:
    Description: Select your key pair
    Type: AWS::EC2::KeyPair::KeyName
    Default: 

  Subnets:
    Description: Select at least 2 subnets
    Type: List<AWS::EC2::Subnet::Id> 

Mappings: 

  RegionMap: 
    us-east-1: 
      "HVM64": "ami-0ff8a91507f77f867"
    us-west-1: 
      "HVM64": "ami-0bdb828fd58c52235"
    eu-west-1: 
      "HVM64": "ami-047bb4163c506cd98"
    ap-southeast-1: 
      "HVM64": "ami-08569b978cc4dfa10"
    ap-northeast-1: 
      "HVM64": "ami-06cd52961ce9f0d85"
  
Resources:

  MyASGPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref myASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricPairSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: 1
      LoadBalancerNames: 
        - !GetAtt MyALB.LoadBalancerName
      MaxSize: 3
      MinSize: 2
      TargetGroupARNs: 
        - !Ref MyTargetGrp
      VPCZoneIdentifier: !Ref Subnets

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: alicgrdmr
      SecurityGroups: 
        - !GetAtt MySecGrp.GroupId
      Subnets: 
        !Ref Subnets
      Type: application

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap 
          - RegionImageMap
          - !Ref "AWS::Region"
          - AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref MyKeyPair
        SecurityGroupIds: 
          -!GetAtt MySecGrp.GroupId
        UserData: !Base64 |
          #!/bin/bash

          #update os
          yum update -y
          #install apache server
          yum install -y httpd
          # get private ip address of ec2 instance using instance metadata
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PRIVATE_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4`
          # get public ip address of ec2 instance using instance metadata
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PUBLIC_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4` 
          # get date and time of server
          DATE_TIME=`date`
          # set all permissions
          chmod -R 777 /var/www/html
          # create a custom index.html file
          echo "<html>
          <head>
              <title> Application Load Balancer</title>
          </head>
          <body>
              <h1>Testing Application Load Balancer</h1>
              <h2>Congratulations! You have created an instance from Launch Template</h2>
              <h3>This web server is launched from the launch template by YOUR_NAME</h3>
              <p>This instance is created at <b>$DATE_TIME</b></p>
              <p>Private IP address of this instance is <b>$PRIVATE_IP</b></p>
              <p>Public IP address of this instance is <b>$PUBLIC_IP</b></p>
          </body>
          </html>" > /var/www/html/index.html
          # start apache server
          systemctl start httpd
          systemctl enable httpd
      LaunchTemplateName: AlicgrdmrLaunchTemplate

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      Port: Number
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC ##later

  MySecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      GroupName: alicgrdmrgroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC ##later
  
Outputs:
  ShowDNS:
    Description:  DNS of ALB 
    Value: !Join 
      -''
      - - 'http://'
        - !GetAtt myALB.DNSName

